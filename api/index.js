const express = require('express');
const cors = require('cors');
const path = require('path');
const cookieParser = require('cookie-parser');
const querystring = require('querystring');
const axios = require('axios');
require('dotenv').config();

const app = express();

// ÎØ∏Îì§Ïõ®Ïñ¥ ÏÑ§Ï†ï
app.use(cors({
    origin: '*',
    methods: ['GET', 'POST', 'OPTIONS'],
    allowedHeaders: ['Authorization', 'Content-Type', 'Cookie'],
    credentials: true
}));

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, '../public')));

// ÌôòÍ≤Ω Î≥ÄÏàò
const IMP_API_KEY = process.env.IMP_KEY;
const IMP_API_SECRET = process.env.IMP_SECRET;

console.log('üöÄ ÏÑúÎ≤Ñ ÏãúÏûë Ï§ë...');
console.log('üì¶ Express Î°úÎìú ÏôÑÎ£å');
console.log('üîë ÏïÑÏûÑÌè¨Ìä∏ ÌÇ§ ÌôïÏù∏:', IMP_API_KEY ? '‚úÖ' : '‚ùå');

// Firebase Ï¥àÍ∏∞Ìôî - Îçî ÏïàÏ†ïÏ†ÅÏù∏ Î∞©Î≤ï
let admin = null;
let firebaseInitialized = false;
let firebaseError = null;

async function initializeFirebase() {
    try {
        console.log('üöÄ Firebase Admin SDK Î°úÎìú ÏãúÏûë...');

        // ÎèôÏ†ÅÏúºÎ°ú Firebase Admin Î°úÎìú
        admin = await import('firebase-admin').then(module => module.default || module);
        console.log('‚úÖ Firebase Admin SDK Î™®Îìà Î°úÎìú ÏÑ±Í≥µ');

        // Ïù¥ÎØ∏ Ï¥àÍ∏∞ÌôîÎêú Ïï±Ïù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
        if (admin.apps && admin.apps.length > 0) {
            console.log('‚ÑπÔ∏è Firebase Admin Ïï±Ïù¥ Ïù¥ÎØ∏ Ï¥àÍ∏∞ÌôîÎê®');
            firebaseInitialized = true;
            return;
        }

        if (process.env.FIREBASE_SERVICE_ACCOUNT) {
            console.log('üîë FIREBASE_SERVICE_ACCOUNT ÌôòÍ≤ΩÎ≥ÄÏàò Î∞úÍ≤¨');

            try {
                const serviceAccount = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT);
                console.log('‚úÖ JSON ÌååÏã± ÏÑ±Í≥µ');
                console.log('üîç ÌîÑÎ°úÏ†ùÌä∏ ID:', serviceAccount.project_id);

                admin.initializeApp({
                    credential: admin.credential.cert(serviceAccount),
                    databaseURL: "https://eroom-e6659-default-rtdb.asia-southeast1.firebasedatabase.app"
                });

                firebaseInitialized = true;
                console.log('‚úÖ Firebase Admin SDK Ï¥àÍ∏∞Ìôî ÏÑ±Í≥µ (ÌôòÍ≤ΩÎ≥ÄÏàò)');

            } catch (jsonError) {
                firebaseError = `JSON ÌååÏã± Ïã§Ìå®: ${jsonError.message}`;
                console.error('‚ùå JSON ÌååÏã± Ïã§Ìå®:', jsonError.message);
            }
        } else {
            console.log('‚ö†Ô∏è FIREBASE_SERVICE_ACCOUNT ÌôòÍ≤ΩÎ≥ÄÏàòÍ∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏùå');
            firebaseError = 'FIREBASE_SERVICE_ACCOUNT ÌôòÍ≤ΩÎ≥ÄÏàò ÏóÜÏùå';

            // Î°úÏª¨ Í∞úÎ∞úÌôòÍ≤ΩÏö©
            try {
                console.log('üìÅ Î°úÏª¨ Firebase ÏÑúÎπÑÏä§ Í≥ÑÏ†ï ÌååÏùº Í≤ÄÏÉâ Ï§ë...');
                const serviceAccount = require('../eroom-e6659-firebase-adminsdk-fbsvc-60b39b555b.json');

                admin.initializeApp({
                    credential: admin.credential.cert(serviceAccount),
                    databaseURL: "https://eroom-e6659-default-rtdb.asia-southeast1.firebasedatabase.app"
                });

                firebaseInitialized = true;
                console.log('‚úÖ Firebase Admin SDK Ï¥àÍ∏∞Ìôî ÏÑ±Í≥µ (Î°úÏª¨ ÌååÏùº)');

            } catch (err) {
                console.warn('‚ö†Ô∏è Î°úÏª¨ Firebase ÏÑúÎπÑÏä§ Í≥ÑÏ†ï ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§:', err.message);
                firebaseError = `Î°úÏª¨ ÌååÏùº Î°úÎìú Ïã§Ìå®: ${err.message}`;
            }
        }

    } catch (error) {
        firebaseError = `Firebase Ï¥àÍ∏∞Ìôî Ïò§Î•ò: ${error.message}`;
        console.error('‚ùå Firebase Ï¥àÍ∏∞Ìôî Ïò§Î•ò:', error.message);
        console.log('üí° Firebase Í∏∞Îä•ÏùÄ ÎπÑÌôúÏÑ±ÌôîÎê©ÎãàÎã§.');
    }
}

// Firebase Ï¥àÍ∏∞Ìôî Ïã§Ìñâ
initializeFirebase().then(() => {
    console.log('üèÅ Firebase Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
    console.log('üî• Firebase ÏÉÅÌÉú:', firebaseInitialized ? 'ÌôúÏÑ±Ìôî' : 'ÎπÑÌôúÏÑ±Ìôî');
    if (firebaseError) {
        console.log('‚ùå Firebase Ïò§Î•ò:', firebaseError);
    }
});

// ÏûÑÏãú Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•ÏÜå (Î©îÎ™®Î¶¨)
const tempDataStore = new Map();

// ÏûÑÏãú ÌÜ†ÌÅ∞ ÏÉùÏÑ± Ìï®Ïàò
function generateTempToken() {
    return 'temp_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
}

async function checkUserExists(uid) {
    if (!firebaseInitialized || !admin) {
        console.log('‚ùå FirebaseÍ∞Ä Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏùå');
        return { userExists: false, userdata: [] };
    }

    try {
        console.log('üîç FirebaseÏóêÏÑú ÏÇ¨Ïö©Ïûê Í≤ÄÏÉâ:', uid);

        const db = admin.firestore();
        const userdata = await db.collection('user_Datas')
            .where("uid", "==", uid)
            .get();

        if (userdata.empty) {
            console.log('‚ùå FirebaseÏóêÏÑú ÏÇ¨Ïö©ÏûêÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏùå:', uid);
            return { userExists: false, userdata: [] };
        }

        const userData = userdata.docs[0].data();
        console.log('‚úÖ FirebaseÏóêÏÑú ÏÇ¨Ïö©Ïûê Ï∞æÏùå:', userData.nickname);

        return {
            userExists: true,
            userdata: [userData]
        };
    } catch (error) {
        console.error('‚ùå Firebase Ïú†Ï†Ä ÌôïÏù∏ Ïò§Î•ò:', error);
        return { userExists: false, userdata: [] };
    }
}

// ÏïÑÏûÑÌè¨Ìä∏ Í¥ÄÎ†® Ìï®ÏàòÎì§
async function getToken() {
    if (!IMP_API_KEY || !IMP_API_SECRET) {
        throw new Error('ÏïÑÏûÑÌè¨Ìä∏ API ÌÇ§Í∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏùå');
    }

    const response = await axios.post('https://api.iamport.kr/users/getToken', {
        imp_key: IMP_API_KEY,
        imp_secret: IMP_API_SECRET,
    });
    if (response.data.code === 0) return response.data.response.access_token;
    throw new Error('ÏïÑÏûÑÌè¨Ìä∏ ÌÜ†ÌÅ∞ Î∞úÍ∏â Ïã§Ìå®');
}

async function verifyPayment(imp_uid) {
    try {
        const token = await getToken();
        const { data } = await axios.get(`https://api.iamport.kr/payments/${imp_uid}`, {
            headers: { Authorization: token }
        });

        if (data.code === 0 && data.response.status === 'paid') {
            console.log("!!Í≤∞Ï†ú ÏÑ±Í≥µ!")
            return true;
        } else {
            console.log("!!Í≤∞Ï†ú Ïã§Ìå®!")
            return false;
        }
    } catch (error) {
        console.error('Í≤∞Ï†ú Í≤ÄÏ¶ù Ïò§Î•ò:', error);
        return false;
    }
}

// Í≤∞Ï†ú Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
app.post('/store-payment-data', (req, res) => {
    try {
        console.log('üíæ Í≤∞Ï†ú Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• ÏöîÏ≤≠:', req.body);

        const { paymentData, userId } = req.body;

        if (!paymentData || !userId) {
            return res.status(400).json({
                success: false,
                message: 'ÌïÑÏàò Îç∞Ïù¥ÌÑ∞Í∞Ä ÎàÑÎùΩÎêòÏóàÏäµÎãàÎã§.'
            });
        }

        const tempToken = generateTempToken();

        tempDataStore.set(tempToken, {
            paymentData,
            userId,
            timestamp: Date.now()
        });

        setTimeout(() => {
            tempDataStore.delete(tempToken);
            console.log('üóëÔ∏è ÌÜ†ÌÅ∞ ÎßåÎ£åÎ°ú ÏÇ≠Ï†ú:', tempToken);
        }, 5 * 60 * 1000);

        console.log('‚úÖ Í≤∞Ï†ú Îç∞Ïù¥ÌÑ∞ ÏûÑÏãú Ï†ÄÏû• ÏôÑÎ£å:', tempToken);

        res.json({
            success: true,
            tempToken: tempToken,
            redirectUrl: `/success?token=${tempToken}`
        });

    } catch (error) {
        console.error('‚ùå Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• Ïã§Ìå®:', error);
        res.status(500).json({
            success: false,
            message: 'Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû• Ïã§Ìå®',
            error: error.message
        });
    }
});

app.get('/get-payment-data/:token', (req, res) => {
    try {
        const { token } = req.params;
        console.log('üîç ÌÜ†ÌÅ∞ÏúºÎ°ú Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå:', token);

        const data = tempDataStore.get(token);

        if (!data) {
            console.log('‚ùå ÌÜ†ÌÅ∞Ïóê Ìï¥ÎãπÌïòÎäî Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå:', token);
            return res.status(404).json({
                success: false,
                message: 'Îç∞Ïù¥ÌÑ∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÍ±∞ÎÇò ÎßåÎ£åÎêòÏóàÏäµÎãàÎã§.'
            });
        }

        if (Date.now() - data.timestamp > 5 * 60 * 1000) {
            tempDataStore.delete(token);
            console.log('‚è∞ ÌÜ†ÌÅ∞ ÎßåÎ£å:', token);
            return res.status(404).json({
                success: false,
                message: 'Îç∞Ïù¥ÌÑ∞Í∞Ä ÎßåÎ£åÎêòÏóàÏäµÎãàÎã§.'
            });
        }

        tempDataStore.delete(token);
        console.log('‚úÖ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå ÏÑ±Í≥µ, ÌÜ†ÌÅ∞ ÏÇ≠Ï†ú:', token);

        res.json({
            success: true,
            paymentData: data.paymentData,
            userId: data.userId
        });

    } catch (error) {
        console.error('‚ùå Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïã§Ìå®:', error);
        res.status(500).json({
            success: false,
            message: 'Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïã§Ìå®',
            error: error.message
        });
    }
});

// Firebase ÏÑ§Ï†ï ÎùºÏö∞Ìä∏ - Ïã§Ï†ú ÌôòÍ≤ΩÎ≥ÄÏàò ÏÇ¨Ïö©
app.get('/firebase-config', (req, res) => {
    try {
        console.log('üîç Firebase ÌôòÍ≤ΩÎ≥ÄÏàò ÌôïÏù∏:');
        console.log('API_KEY:', process.env.NEXT_FIREBASE_API_KEY ? '‚úÖ' : '‚ùå');
        console.log('AUTH_DOMAIN:', process.env.NEXT_FIREBASE_AUTH_DOMAIN ? '‚úÖ' : '‚ùå');
        console.log('PROJECT_ID:', process.env.NEXT_FIREBASE_PROJECT_ID ? '‚úÖ' : '‚ùå');

        const config = {
            apiKey: process.env.NEXT_FIREBASE_API_KEY,
            authDomain: process.env.NEXT_FIREBASE_AUTH_DOMAIN,
            databaseURL: "https://eroom-e6659-default-rtdb.asia-southeast1.firebasedatabase.app",
            projectId: process.env.NEXT_FIREBASE_PROJECT_ID,
            storageBucket: process.env.NEXT_FIREBASE_STORAGE_BUCKET,
            messagingSenderId: process.env.NEXT_FIREBASE_MESSAGING_SENDER_ID,
            appId: process.env.NEXT_FIREBASE_APP_ID,
            measurementId: process.env.NEXT_FIREBASE_MEASUREMENT_ID
        };

        // ÌïÑÏàò ÏÑ§Ï†ïÏù¥ ÏóÜÏúºÎ©¥ ÏóêÎü¨ Î∞òÌôò
        if (!config.apiKey || !config.projectId) {
            return res.status(500).json({
                error: 'Firebase ÏÑ§Ï†ïÏù¥ ÏôÑÏ†ÑÌïòÏßÄ ÏïäÏäµÎãàÎã§.',
                message: 'Vercel ÌôòÍ≤ΩÎ≥ÄÏàòÎ•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.'
            });
        }

        console.log('üéØ Firebase Config Ï†ÑÏÜ°:', Object.keys(config));
        res.json(config);

    } catch (error) {
        console.error('‚ùå Firebase config Ïò§Î•ò:', error);
        res.status(500).json({
            error: 'Firebase config Î°úÎìú Ïã§Ìå®',
            message: error.message
        });
    }
});

// Ìó¨Ïä§Ï≤¥ÌÅ¨
app.get('/health', (req, res) => {
    res.json({
        status: 'OK',
        timestamp: new Date().toISOString(),
        firebase: firebaseInitialized ? 'initialized' : 'error',
        firebaseError: firebaseError,
        iamport: !!IMP_API_KEY,
        version: '3.0.0-production',
        tempDataCount: tempDataStore.size
    });
});

// ÏÇ¨Ïö©Ïûê UID Ï†ÄÏû• Î∞è ÌôïÏù∏
app.get('/save-uid', async (req, res) => {
    try {
        const { uid } = req.query;

        if (!uid) {
            return res.status(400).json({
                success: false,
                message: 'UIDÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§.'
            });
        }

        console.log('üíæ UID Ï†ÄÏû• ÏöîÏ≤≠:', uid);

        // FirebaseÏóêÏÑú ÏÇ¨Ïö©Ïûê ÌôïÏù∏
        const userCheck = await checkUserExists(uid);

        if (!userCheck.userExists) {
            console.log('‚ùå Ìï¥Îãπ UIDÏùò Ïú†Ï†ÄÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§:', uid);
            return res.status(404).json({
                success: false,
                message: 'Ìï¥Îãπ UIDÏùò Ïú†Ï†ÄÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. FirebaseÏóê Îì±Î°ùÎêú ÏÇ¨Ïö©ÏûêÏù∏ÏßÄ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.',
                uid: uid
            });
        }

        console.log('‚úÖ ÏÇ¨Ïö©Ïûê ÌôïÏù∏ ÏôÑÎ£å:', userCheck.userdata[0]?.nickname || 'Unknown');

        const userData = userCheck.userdata[0];
        const redirectScript = `
        <!DOCTYPE html>
        <html>
        <head>
            <title>Î°úÍ∑∏Ïù∏ Ï≤òÎ¶¨ Ï§ë...</title>
            <style>
                body {
                    font-family: Arial, sans-serif;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    min-height: 100vh;
                    margin: 0;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                }
                .container {
                    text-align: center;
                    background: white;
                    padding: 40px;
                    border-radius: 20px;
                    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
                }
                .loading {
                    display: inline-block;
                    width: 40px;
                    height: 40px;
                    border: 4px solid #f3f3f3;
                    border-top: 4px solid #667eea;
                    border-radius: 50%;
                    animation: spin 1s linear infinite;
                    margin: 20px auto;
                }
                @keyframes spin {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                }
                .success {
                    background: #d4edda;
                    border: 1px solid #c3e6cb;
                    padding: 10px;
                    border-radius: 5px;
                    margin: 10px 0;
                    color: #155724;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <h2>üîê Firebase Ïù∏Ï¶ù ÏôÑÎ£å</h2>
                <div class="success">‚úÖ ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù ÏÑ±Í≥µ: ${userData.nickname}</div>
                <div class="loading"></div>
                <p>ÌÅ¨Î†àÎîß ÏÉÅÏ†êÏúºÎ°ú Ïù¥Îèô Ï§ë...</p>
            </div>
            <script>
                console.log('üíæ UID Ï†ÄÏû•:', '${uid}');
                console.log('üë§ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥:', '${userData.nickname}');
                console.log('üìß Ïù¥Î©îÏùº:', '${userData.email || 'N/A'}');
                
                // sessionStorageÏóê ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï†ÄÏû•
                sessionStorage.setItem('userUid', '${uid}');
                sessionStorage.setItem('userNickname', '${userData.nickname}');
                sessionStorage.setItem('userEmail', '${userData.email || ''}');
                
                console.log('‚úÖ sessionStorage Ï†ÄÏû• ÏôÑÎ£å');
                
                // 2Ï¥à ÌõÑ ÌÅ¨Î†àÎîß ÏÉÅÏ†êÏúºÎ°ú Ïù¥Îèô
                setTimeout(() => {
                    window.location.href = '/credit-shop.html';
                }, 2000);
            </script>
        </body>
        </html>
        `;

        res.send(redirectScript);

    } catch (error) {
        console.error('‚ùå save-uid Ï≤òÎ¶¨ Ïò§Î•ò:', error);
        res.status(500).json({
            success: false,
            message: 'Firebase Ïó∞Í≤∞ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
            error: error.message
        });
    }
});

// Í≤∞Ï†ú Í¥ÄÎ†® ÎùºÏö∞Ìä∏Îì§
app.post('/purchase', async (req, res) => {
    const { uid, creditAmount, timestamp, price } = req.body;
    console.log('ÌÅ¨Î†àÎîß Íµ¨Îß§ Ï†ïÎ≥¥ ÏàòÏã†:', { uid, creditAmount, timestamp, price });

    // FirebaseÏóê Íµ¨Îß§ Ï†ïÎ≥¥ Ï†ÄÏû• (ÏòµÏÖò)
    if (firebaseInitialized && admin) {
        try {
            const db = admin.firestore();
            await db.collection('purchases').add({
                uid,
                creditAmount: parseInt(creditAmount),
                price: parseInt(price),
                timestamp: new Date(timestamp),
                status: 'pending'
            });
            console.log('‚úÖ FirebaseÏóê Íµ¨Îß§ Ï†ïÎ≥¥ Ï†ÄÏû• ÏôÑÎ£å');
        } catch (error) {
            console.error('‚ùå Firebase Íµ¨Îß§ Ï†ïÎ≥¥ Ï†ÄÏû• Ïã§Ìå®:', error);
        }
    }

    res.json({
        success: true,
        message: 'FirebaseÏóê ÌÅ¨Î†àÎîß Íµ¨Îß§ Ï†ïÎ≥¥Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§',
        data: { uid, creditAmount, timestamp, price }
    });
});

// ÎÇòÎ®∏ÏßÄ ÎùºÏö∞Ìä∏Îì§...
app.get('/verify-user-and-payment', async (req, res) => {
    const authHeader = req.headers['authorization'];
    if (!authHeader) {
        return res.status(401).json({
            success: false,
            userExists: false,
            message: 'Authorization Ìó§ÎçîÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§'
        });
    }

    const userId = authHeader.replace('Bearer ', '').trim();
    console.log('üîç ÏÇ¨Ïö©Ïûê Í≤ÄÏ¶ù:', decodeURIComponent(userId));

    const { orderId, amount, orderName, method, paymentKey, creditAmount } = req.query;

    // FirebaseÏóêÏÑú ÏÇ¨Ïö©Ïûê ÌôïÏù∏
    const userCheck = await checkUserExists(decodeURIComponent(userId));

    res.json({
        success: true,
        userExists: userCheck.userExists,
        userId: decodeURIComponent(userId),
        message: userCheck.userExists ? 'FirebaseÏóêÏÑú ÏÇ¨Ïö©Ïûê ÌôïÏù∏ ÏôÑÎ£å' : 'ÏÇ¨Ïö©ÏûêÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏùå',
        paymentData: { orderId, amount, orderName, method, paymentKey, creditAmount }
    });
});

app.get('/payment-complete', async (req, res) => {
    const { imp_uid, merchant_uid } = req.query;

    if (!imp_uid || !merchant_uid) {
        return res.status(400).send('ÏûòÎ™ªÎêú ÏöîÏ≤≠ÏûÖÎãàÎã§.');
    }

    try {
        const verified = await verifyPayment(imp_uid);
        const redirectUrl = verified
            ? `/success?imp_uid=${imp_uid}&merchant_uid=${merchant_uid}`
            : `/fail.html?imp_uid=${imp_uid}&merchant_uid=${merchant_uid}`;
        res.redirect(redirectUrl);
    } catch (err) {
        console.error('Í≤∞Ï†ú Í≤ÄÏ¶ù Ïò§Î•ò:', err);
        res.status(500).send('ÏÑúÎ≤Ñ Ïò§Î•ò Î∞úÏÉù');
    }
});

app.get('/login', (req, res) => {
    const filePath = path.join(__dirname, '../public/login.html');
    res.sendFile(filePath, (err) => {
        if (err) {
            console.error('login.html ÌååÏùº Ïò§Î•ò:', err);
            res.status(500).send('Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
        }
    });
});

app.get('/', async (req, res) => {
    const uid = req.cookies?.uid;

    if (!uid) {
        return res.sendFile(path.join(__dirname, '../public/login.html'));
    }

    const result = await checkUserExists(uid);
    if (!result.userExists) {
        return res.sendFile(path.join(__dirname, '../public/login.html'));
    }

    const nickname = result.userdata[0]?.nickname || 'unknown';

    const fs = require('fs');
    const htmlPath = path.join(__dirname, '../public/credit-shop.html');

    fs.readFile(htmlPath, 'utf8', (err, data) => {
        if (err) {
            console.error('ÌååÏùº ÏùΩÍ∏∞ Ïò§Î•ò:', err);
            return res.status(500).send('ÌååÏùº Ïò§Î•ò');
        }

        const modifiedHtml = data.replace(
            '</body>',
            `<script>
                const nickname = '${nickname.replace(/'/g, "\\'")}';
                const uid = '${uid.replace(/'/g, "\\'")}';
                sessionStorage.setItem('userId', nickname);
                sessionStorage.setItem('userUid', uid);
                const userIdElement = document.getElementById('user-id');
                if (userIdElement) userIdElement.textContent = nickname;
            </script></body>`
        );

        res.send(modifiedHtml);
    });
});

app.get('/success', (req, res) => {
    const token = req.query.token;
    if (token) {
        const filePath = path.join(__dirname, '../public/success.html');
        return res.sendFile(filePath);
    }

    const nickname = req.cookies?.nickname || 'unknown';
    const { imp_uid, merchant_uid, orderId, amount, orderName, method } = req.query;

    const paymentData = {
        imp_uid,
        merchant_uid,
        orderId: orderId || merchant_uid,
        amount,
        orderName,
        method,
        nickname
    };

    const fs = require('fs');
    const filePath = path.join(__dirname, '../public/success.html');

    fs.readFile(filePath, 'utf8', (err, html) => {
        if (err) {
            console.error('success.html ÏùΩÍ∏∞ Ïò§Î•ò:', err);
            return res.status(500).send('ÌååÏùº ÏùΩÍ∏∞ Ïò§Î•ò');
        }

        const modifiedHtml = html.replace(
            '</body>',
            `<script>
                window.addEventListener('DOMContentLoaded', () => {
                    const paymentData = ${JSON.stringify(paymentData)};
                    document.getElementById('orderId').textContent = paymentData.orderId || '-';
                    document.getElementById('orderName').textContent = paymentData.orderName || '-';
                    document.getElementById('amount').textContent = paymentData.amount ? Number(paymentData.amount).toLocaleString() + 'Ïõê' : '-';
                    document.getElementById('method').textContent = paymentData.method || '-';
                    window.paymentData = paymentData;
                });
            </script></body>`
        );
        res.send(modifiedHtml);
    });
});

app.post('/success', (req, res) => {
    res.redirect(`/success?${querystring.stringify(req.body)}`);
});

app.post('/iamport-webhook', (req, res) => {
    console.log('ÏïÑÏûÑÌè¨Ìä∏ ÏõπÌõÖ Ìò∏Ï∂úÎê®!', req.body);
    res.send('ÏõπÌõÖ OK');
});

// ÏóêÎü¨ Ï≤òÎ¶¨
app.use((err, req, res, next) => {
    console.error('ÏÑúÎ≤Ñ ÏóêÎü¨:', err);
    res.status(500).json({
        success: false,
        message: 'ÏÑúÎ≤Ñ ÎÇ¥Î∂Ä Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
        error: err.message
    });
});

// 404 Ï≤òÎ¶¨
app.use((req, res) => {
    console.log('‚ùå 404 - Ï∞æÏùÑ Ïàò ÏóÜÎäî Í≤ΩÎ°ú:', req.path);
    res.status(404).json({
        success: false,
        message: 'ÌéòÏù¥ÏßÄÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.',
        path: req.path
    });
});

// VercelÏóêÏÑúÎäî module.exportsÎ°ú ÎÇ¥Î≥¥ÎÇ¥Ïïº Ìï®
module.exports = app;

// Î°úÏª¨ Í∞úÎ∞úÏö©
if (require.main === module) {
    const PORT = process.env.PORT || 3000;
    app.listen(PORT, () => {
        console.log(`‚úÖ ÏÑúÎ≤Ñ Ïã§Ìñâ Ï§ë: http://localhost:${PORT}`);
        console.log(`üîç Ìó¨Ïä§Ï≤¥ÌÅ¨: http://localhost:${PORT}/health`);
        console.log(`üî• Firebase: ${firebaseInitialized ? 'ÌôúÏÑ±Ìôî' : 'ÎπÑÌôúÏÑ±Ìôî'}`);
        console.log(`üí≥ ÏïÑÏûÑÌè¨Ìä∏: ${IMP_API_KEY ? 'ÏÑ§Ï†ïÎê®' : 'ÎØ∏ÏÑ§Ï†ï'}`);
    });
}